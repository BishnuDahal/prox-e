{"version":3,"sources":["webpack:///src/app/@auth/login/login.component.html","webpack:///src/app/@auth/login/login.component.ts","webpack:///src/app/@auth/logout/logout.component.ts","webpack:///src/app/@auth/logout/logout.component.html","webpack:///src/app/@auth/register/register.component.html","webpack:///src/app/@auth/request-pass/request-pass.component.html","webpack:///src/app/@auth/reset-password/reset-pass.component.html","webpack:///src/app/@auth/routing/auth-routing.module.ts","webpack:///src/app/@auth/reset-password/reset-pass.component.ts","webpack:///src/app/@auth/request-pass/request-pass.component.ts","webpack:///src/app/@auth/register/register.component.ts","webpack:///src/app/@auth/auth.module.ts"],"names":["LogoutComponent","LoginComponent","authService","router","route","changeDetector","super","loading","showMessages","error","success","submitted","returnUrl","this","snapshot","queryParams","isAuthenticated","isAdmin","isPrivileged","isInPublicMode","navigateByUrl","user","email","password","login","subscribe","val","isSuccess","loginForm","controls","logout","ResetPassComponent","RequestPassComponent","RegisterComponent","AuthRoutingModule","AuthModule","routes","path","component","children","formBuilder","navigate","signUp","group","get","value","notSame","registerForm","register","forgotPasswordForm","required","forgotPassword","forChild","NB_MODULES","N"],"mappings":"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","file":"x","sourcesContent":["<nb-alert\n  *ngIf=\"showMessages.error && !submitted\"\n  outline=\"danger\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Login Failed</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert\n  *ngIf=\"showMessages.success && !submitted\"\n  outline=\"success\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Login Succeeded</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.success }}</li>\n  </ul>\n</nb-alert>\n\n<div class=\"row centrino\">\n  <div class=\"col-md-6\">\n    <nb-card>\n      <nb-card-header\n        >Please log in to access the requested sections:</nb-card-header\n      >\n      <nb-card-body>\n        <form\n          (submit)=\"login()\"\n          aria-labelledby=\"title\"\n          class=\"form-horizontal\"\n        >\n          <div class=\"form-group row\">\n            <label for=\"input-email\" class=\"label col-sm-2 form-control-label\"\n              >Username</label\n            >\n            <div class=\"col-sm-8\">\n              <input\n                nbInput\n                fullWidth\n                formControlName=\"username\"\n                name=\"username\"\n                id=\"input-username\"\n                placeholder=\"Username\"\n                fieldSize=\"large\"\n                autofocus\n                [status]=\"\n                  f.username.dirty\n                    ? f.username.invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n                [required]=\"true\"\n                [attr.aria-invalid]=\"\n                  f.username.invalid && f.username.touched ? true : null\n                \"\n              />\n              <ng-container *ngIf=\"f.username.invalid && f.username.touched\">\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"f.username.errors?.required\"\n                >\n                  Username is required\n                </p>\n              </ng-container>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label\n              for=\"input-password\"\n              class=\"label col-sm-2 form-control-label\"\n              >Password</label\n            >\n            <div class=\"col-sm-8\">\n              <input\n                nbInput\n                fullWidth\n                formControlName=\"password\"\n                name=\"password\"\n                type=\"password\"\n                id=\"input-password\"\n                placeholder=\"Password\"\n                fieldSize=\"large\"\n                [status]=\"\n                  f.password.dirty\n                    ? f.password.invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n                [required]=\"true\"\n                [minlength]=\"6\"\n                [maxlength]=\"36\"\n                [attr.aria-invalid]=\"\n                  f.password.invalid && f.password.touched ? true : null\n                \"\n              />\n              <ng-container *ngIf=\"f.password.invalid && f.password.touched\">\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"f.password.errors?.required\"\n                >\n                  Password is required.\n                </p>\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"\n                    f.password.errors?.minlength || f.password.errors?.maxlength\n                  \"\n                >\n                  Password should contain more than 6 characters.\n                </p>\n              </ng-container>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <div class=\"offset-sm-2 col-sm-4\">\n              <button\n                matRipple\n                nbButton\n                fullWidth\n                outline\n                status=\"primary\"\n                size=\"large\"\n                [disabled]=\"!loginForm.valid\"\n              >\n                Log in\n              </button>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <a routerLink=\"/auth/register\" class=\"btn btn-link\">Register</a>\n            <a routerLink=\"/auth/forgot-password\" class=\"btn btn-link\">Forgot Password</a>\n        </div>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n<nb-layout style=\"display: none\"></nb-layout>\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbLoginComponent } from '@nebular/auth';\nimport { BasicAuth } from '../../@models/auth-response.model';\nimport { AuthService } from '../core/auth.service';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'ngx-login',\n  styleUrls: ['./login.component.scss'],\n  templateUrl: './login.component.html'\n})\nexport class LoginComponent extends NbLoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n\n  loading = false;\n\n  redirectDelay: number;\n  showMessages = { error: null, success: null };\n  submitted = false;\n  private returnUrl: string = '/hub/home';\n\n  constructor(\n    private authService: AuthService,\n    protected router: Router,\n    private route: ActivatedRoute,\n    private changeDetector: ChangeDetectorRef\n  ) {\n    super(authService, {}, changeDetector, router);\n    super.socialLinks = [];\n  }\n\n  ngOnInit() {\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/hub/home';\n    if (\n      this.authService.isAuthenticated ||\n      this.authService.isAdmin() ||\n      this.authService.isPrivileged ||\n      !this.authService.isInPublicMode) {\n      this.router.navigateByUrl(this.returnUrl);\n    }\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  login() {\n    const { email, password } = this.user;\n    this.authService.login(email, password)\n      .subscribe((val: BasicAuth.Response) => {\n        if (BasicAuth.isSuccess(val)) {\n          this.router.navigateByUrl(this.returnUrl);\n        } else {\n          this.showMessages.error = val.error;\n        }\n      });\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NbLogoutComponent } from '@nebular/auth';\nimport { AuthService } from '../core/auth.service';\n\n@Component({\n  selector: 'ngx-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss']\n})\nexport class LogoutComponent extends NbLogoutComponent implements OnInit {\n\n  constructor(\n    private authService: AuthService,\n    protected router: Router,\n    ) {\n      super(authService, {}, router);\n    }\n\n    ngOnInit() {\n      if (\n        this.authService.isAuthenticated() ||\n        this.authService.isPrivileged ||\n        !this.authService.isInPublicMode) {\n          this.authService.logout();\n        }\n      }\n\n    }\n","<p>logout works!</p>\n","<nb-alert\n  *ngIf=\"showMessages.error && !submitted\"\n  outline=\"danger\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Registration Failed</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert\n  *ngIf=\"showMessages.success && !submitted\"\n  outline=\"success\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Registration Succeeded</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.success }}</li>\n  </ul>\n</nb-alert>\n\n\n<div class=\"row centrino\">\n  <div class=\"col-md-6\">\n    <nb-card>\n      <nb-card-header\n        >User Registration</nb-card-header\n      >\n      <nb-card-body>\n\n<form\n  (ngSubmit)=\"register()\"\n  aria-labelledby=\"title\"\n>\n\n  <div class=\"form-group row\">\n    <label for=\"input-firstname\" class=\"label col-sm-2 form-control-label\"\n      >First Name</label\n    >\n    <div class=\"col-sm-8\">\n      <input\n        nbInput\n        fullWidth\n        formControlName=\"firstName\"\n        name=\"firstName\"\n        id=\"input-firstname\"\n        placeholder=\"First Name\"\n        fieldSize=\"large\"\n        autofocus\n        [status]=\"\n          fval.firstName.dirty\n            ? fval.firstName.invalid\n              ? 'danger'\n              : 'success'\n            : 'basic'\n        \"\n        [required]=\"true\"\n        [attr.aria-invalid]=\"\n          fval.firstName.invalid && fval.firstName.touched ? true : null\n        \"\n      />\n      <ng-container *ngIf=\"fval.firstName.invalid && fval.firstName.touched\">\n        <p\n          class=\"caption status-danger\"\n          *ngIf=\"fval.firstName.errors?.required\"\n        >\n          First Name is required\n        </p>\n      </ng-container>\n    </div>\n  </div>\n\n  <div class=\"form-group row\">\n    <label for=\"input-lastname\" class=\"label col-sm-2 form-control-label\"\n      >Last Name</label\n    >\n    <div class=\"col-sm-8\">\n      <input\n        nbInput\n        fullWidth\n        formControlName=\"lastName\"\n        name=\"lastName\"\n        id=\"input-lastname\"\n        placeholder=\"Last Name\"\n        fieldSize=\"large\"\n        autofocus\n        [status]=\"\n          fval.lastName.dirty\n            ? fval.lastName.invalid\n              ? 'danger'\n              : 'success'\n            : 'basic'\n        \"\n        [required]=\"true\"\n        [attr.aria-invalid]=\"\n          fval.lastName.invalid && fval.lastName.touched ? true : null\n        \"\n      />\n      <ng-container *ngIf=\"fval.lastName.invalid && fval.lastName.touched\">\n        <p\n          class=\"caption status-danger\"\n          *ngIf=\"fval.lastName.errors?.required\"\n        >\n          Last Name is required\n        </p>\n      </ng-container>\n    </div>\n  </div>\n\n\n  <div class=\"form-group row\">\n    <label for=\"input-email\" class=\"label col-sm-2 form-control-label\"\n      >Email</label\n    >\n    <div class=\"col-sm-8\">\n      <input\n        nbInput\n        fullWidth\n        formControlName=\"email\"\n        name=\"email\"\n        id=\"input-email\"\n        placeholder=\"Email\"\n        fieldSize=\"large\"\n        autofocus\n        [status]=\"\n          fval.email.dirty\n            ? fval.email.invalid\n              ? 'danger'\n              : 'success'\n            : 'basic'\n        \"\n        [required]=\"true\"\n        [attr.aria-invalid]=\"\n          fval.email.invalid && fval.email.touched ? true : null\n        \"\n      />\n      <ng-container *ngIf=\"fval.email.invalid && fval.email.touched\">\n        <p\n          class=\"caption status-danger\"\n          *ngIf=\"fval.email.errors?.required\"\n        >\n          Email is required\n        </p>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"form-group row\">\n    <label for=\"input-password\" class=\"label col-sm-2 form-control-label\"\n      >Password</label\n    >\n    <div class=\"col-sm-8\">\n      <input\n        nbInput\n        fullWidth\n        formControlName=\"password\"\n        name=\"password\"\n        id=\"input-password\"\n        placeholder=\"password\"\n        fieldSize=\"large\"\n        autofocus\n        [status]=\"\n          fval.password.dirty\n            ? fval.password.invalid\n              ? 'danger'\n              : 'success'\n            : 'basic'\n        \"\n        [required]=\"true\"\n        [attr.aria-invalid]=\"\n          fval.password.invalid && fval.password.touched ? true : null\n        \"\n      />\n      <ng-container *ngIf=\"fval.password.invalid && fval.password.touched\">\n        <p\n          class=\"caption status-danger\"\n          *ngIf=\"fval.password.errors?.required\"\n        >\n        Password is required\n        </p>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"form-group row\">\n    <label for=\"input-phone\" class=\"label col-sm-2 form-control-label\"\n      >Phone</label\n    >\n    <div class=\"col-sm-8\">\n      <input\n        nbInput\n        fullWidth\n        formControlName=\"phone\"\n        name=\"phone\"\n        id=\"input-phone\"\n        placeholder=\"phone\"\n        fieldSize=\"large\"\n        autofocus\n        [status]=\"\n          fval.phone.dirty\n            ? fval.phone.invalid\n              ? 'danger'\n              : 'success'\n            : 'basic'\n        \"\n        [required]=\"true\"\n        [attr.aria-invalid]=\"\n          fval.phone.invalid && fval.phone.touched ? true : null\n        \"\n      />\n      <ng-container *ngIf=\"fval.phone.invalid && fval.phone.touched\">\n        <p\n          class=\"caption status-danger\"\n          *ngIf=\"fval.phone.errors?.required\"\n        >\n        Phone is required\n        </p>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"form-group row\">\n    <div class=\"offset-sm-2 col-sm-4\">\n      <button\n        matRipple\n        nbButton\n        fullWidth\n        outline\n        status=\"primary\"\n        size=\"large\"\n        [disabled]=\"!registerForm.valid\"\n      >\n        Register\n      </button>\n    </div>\n  </div>\n\n<div class=\"form-group\">\n<a routerLink=\"/auth/login\" class=\"btn btn-link\">Login to continue</a>\n</div>\n</form>\n</nb-card-body>\n</nb-card>\n</div>\n</div>\n<nb-layout style=\"display: none\"></nb-layout>\n","<nb-alert\n  *ngIf=\"showMessages.error && !submitted\"\n  outline=\"danger\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Login Failed</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert\n  *ngIf=\"showMessages.success && !submitted\"\n  outline=\"success\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Login Succeeded</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.success }}</li>\n  </ul>\n</nb-alert>\n\n<div class=\"row centrino\">\n  <div class=\"col-md-6\">\n    <nb-card>\n      <nb-card-header\n        >Please enter your email to set a new password:</nb-card-header\n      >\n      <nb-card-body>\n        <form\n          (submit)=\"forgotPassword()\"\n          aria-labelledby=\"title\"\n          class=\"form-horizontal\"\n        >\n          <div class=\"form-group row\">\n            <label for=\"input-email\" class=\"label col-sm-2 form-control-label\"\n              >Email</label\n            >\n            <div class=\"col-sm-8\">\n              <input\n                nbInput\n                fullWidth\n                formControlName=\"username\"\n                name=\"username\"\n                id=\"input-email\"\n                placeholder=\"Email\"\n                fieldSize=\"large\"\n                autofocus\n                [status]=\"\n                  f.email.dirty\n                    ? f.email.invalid\n                      ? 'danger'\n                      : 'success'\n                    : 'basic'\n                \"\n                [required]=\"true\"\n                [attr.aria-invalid]=\"\n                  f.email.invalid && f.email.touched ? true : null\n                \"\n              />\n              <ng-container *ngIf=\"f.email.invalid && f.email.touched\">\n                <p\n                  class=\"caption status-danger\"\n                  *ngIf=\"f.username.errors?.required\"\n                >\n                  Email is required\n                </p>\n              </ng-container>\n            </div>\n          </div>\n                   <div class=\"form-group row\">\n            <div class=\"offset-sm-2 col-sm-4\">\n              <button\n                matRipple\n                nbButton\n                fullWidth\n                outline\n                status=\"primary\"\n                size=\"large\"\n                [disabled]=\"!forgotPasswordForm.valid\"\n              >\n                Reset Password\n              </button>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <a routerLink=\"/auth/register\" class=\"btn btn-link\">Register</a>\n            <a routerLink=\"/auth/login\" class=\"btn btn-link\">Log In</a>\n        </div>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n<nb-layout style=\"display: none\"></nb-layout>\n","<nb-alert\n  *ngIf=\"showMessages.error && !submitted\"\n  outline=\"danger\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Login Failed</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert\n  *ngIf=\"showMessages.success && !submitted\"\n  outline=\"success\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Login Succeeded</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ showMessages.success }}</li>\n  </ul>\n</nb-alert>\n\n<div class=\"row centrino\">\n  <div class=\"col-md-6\">\n    <nb-card-header>Change Password</nb-card-header>\n    <nb-card-body>\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"form-group\">\n            <label for=\"inputPassword\">Password</label>\n            <input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Password\">\n          </div>\n        </div>\n        <div class=\"col-sm-6\">\n          <div class=\"form-group\">\n            <label for=\"inputConfirmPassword\">Confirm Password</label>\n            <input type=\"password\" class=\"form-control\" id=\"inputConfirmPassword\" placeholder=\"Confirm Password\">\n          </div>\n        </div>\n      </div>\n    </nb-card-body>  </div>\n</div>\n<nb-layout style=\"display: none\"></nb-layout>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NbAuthComponent } from '@nebular/auth';\nimport { LoginComponent } from '../login/login.component';\nimport { LogoutComponent } from '../logout/logout.component';\nimport { RegisterComponent } from '../register/register.component';\nimport { RequestPassComponent } from '../request-pass/request-pass.component';\nimport { ResetPassComponent } from '../reset-password/reset-pass.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: 'login',\n        component: LoginComponent,\n      },\n      {\n        path: 'register',\n        component: RegisterComponent\n      },\n      {\n        path: 'logout',\n        component: LogoutComponent\n      },\n      {\n        path: 'request-password',\n        component: RequestPassComponent\n      },\n      {\n        path: 'reset-password',\n        component: ResetPassComponent\n      }\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbResetPasswordComponent } from '@nebular/auth';\n\nimport { AuthService } from '../core/auth.service';\nimport { BasicAuth } from '../../@models/auth-response.model';\n\n@Component({\n  selector: 'ngx-reset-pass',\n  templateUrl: './reset-pass.component.html',\n  styleUrls: ['./reset-pass.component.scss']\n})\nexport class ResetPassComponent extends NbResetPasswordComponent implements OnInit {\n\n  constructor(\n    private authService: AuthService,\n    protected router: Router,\n    private route: ActivatedRoute,\n    private changeDetector: ChangeDetectorRef\n  ) {\n    super(authService, {}, changeDetector, router);\n  }\n\n  ngOnInit(): void {\n    if (\n      this.authService.isAdmin() ||\n      this.authService.isPrivileged ||\n      !this.authService.isInPublicMode) {\n      this.router.navigate(['hub', 'home']);\n    }\n  }\n\n  resetPass() {\n    // TODO use pouchdb authenticate to fulfill the request\n    const { email, password } = this.user;\n    this.authService.login(email, password)\n      .subscribe((val: BasicAuth.Response) => {\n        if (BasicAuth.isSuccess(val)) {\n          this.router.navigateByUrl('/hub/home');\n        }\n      });\n  }\n\n}\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbRequestPasswordComponent } from '@nebular/auth';\nimport { AuthService } from '../core/auth.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'ngx-request-pass',\n  templateUrl: './request-pass.component.html',\n  styleUrls: ['./request-pass.component.scss']\n})\nexport class RequestPassComponent extends NbRequestPasswordComponent implements OnInit {\n\n  constructor(\n    private authService: AuthService,\n    protected router: Router,\n    private route: ActivatedRoute,\n    private changeDetector: ChangeDetectorRef,\n    private formBuilder: FormBuilder,\n  ) {\n    super(authService, {}, changeDetector, router);\n  }\n\n  forgotPasswordForm: FormGroup;\n\n  loading = false;\n\n  redirectDelay: number;\n  showMessages = { error: null, success: null };\n  submitted = false;\n  returnUrl: string;\n\n  ngOnInit() {\n    if (\n      this.authService.isAdmin() ||\n      this.authService.isPrivileged ||\n      !this.authService.isInPublicMode) {\n      this.router.navigate(['hub', 'home']);\n    }\n    this.forgotPasswordForm = this.formBuilder.group({\n      email: ['', Validators.required]\n    });\n  }\n\n  get f() {\n    return this.forgotPasswordForm.controls;\n  }\n\n  forgotPassword() {\n    // TODO attach pouchdb authenticate's forgot password api call\n  }\n}\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbRegisterComponent } from '@nebular/auth';\nimport { BasicAuth } from '../../@models/auth-response.model';\nimport { AuthService } from '../core/auth.service';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent extends NbRegisterComponent implements OnInit {\n\n\n  registerForm: FormGroup;\n\n  loading = false;\n\n  redirectDelay: number;\n  showMessages = { error: null, success: null };\n  submitted = false;\n\n  private returnUrl: string = '/hub/home';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    protected router: Router,\n    private changeDetector: ChangeDetectorRef,\n    private authService: AuthService\n  ) {\n    super(authService, {}, changeDetector, router);\n    super.socialLinks = [];\n  }\n\n  ngOnInit(): void {\n    if (\n      this.authService.isAdmin() ||\n      this.authService.isPrivileged ||\n      !this.authService.isInPublicMode) {\n      this.router.navigate(['hub', 'home']);\n    }\n  }\n\n  register() {\n    const { email, password } = this.user;\n    this.authService.signUp(email, password)\n      .subscribe((val: BasicAuth.Response) => {\n        if (BasicAuth.isSuccess(val)) {\n          this.router.navigateByUrl('/hub/home');\n        }\n      });\n  }\n\n  get fval() {\n    return this.registerForm.controls;\n  }\n\n  checkPasswords(group: FormGroup) {\n    const pass = group.get('password').value;\n    const confirmPass = group.get('confirmPassword').value;\n\n    return pass === confirmPass ? null : { notSame: true };\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  NbAlertModule,\n  NbButtonModule,\n  NbCardModule,\n  NbCheckboxModule,\n  NbIconModule,\n  NbInputModule,\n  NbLayoutModule\n} from '@nebular/theme';\nimport { LoginComponent } from './login/login.component';\nimport { LogoutComponent } from './logout/logout.component';\nimport { AuthPipe } from './pipes/auth.pipe';\nimport { ProfileComponent } from './profile/profile.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RequestPassComponent } from './request-pass/request-pass.component';\nimport { ResetPassComponent } from './reset-password/reset-pass.component';\nimport { AuthRoutingModule as AuthRoutingModule } from './routing/auth-routing.module';\n\n\nconst NB_MODULES = [\n  NbIconModule,\n  NbLayoutModule,\n  NbCardModule,\n  NbAlertModule,\n  NbCheckboxModule,\n  NbInputModule,\n  NbButtonModule,\n];\n\nconst DECLARATIVES = [\n  LoginComponent,\n  RegisterComponent,\n  RequestPassComponent,\n  ResetPassComponent,\n  LogoutComponent,\n  ProfileComponent,\n  AuthPipe\n];\n\n@NgModule({\n  declarations: [\n    ...DECLARATIVES\n  ],\n  imports: [\n    ...NB_MODULES,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    AuthRoutingModule\n  ],\n  exports: [...DECLARATIVES]\n})\nexport class AuthModule { }\n"]}